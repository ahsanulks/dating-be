// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ApiV1CreateUserRequest defines model for api.v1.CreateUserRequest.
type ApiV1CreateUserRequest struct {
	Gender      *string `json:"gender,omitempty"`
	Name        *string `json:"name,omitempty"`
	Password    *string `json:"password,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	Username    *string `json:"username,omitempty"`
}

// ApiV1CreateUserResponse defines model for api.v1.CreateUserResponse.
type ApiV1CreateUserResponse struct {
	Id *string `json:"id,omitempty"`
}

// ApiV1CreateUserTokenRequest defines model for api.v1.CreateUserTokenRequest.
type ApiV1CreateUserTokenRequest struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ApiV1CreateUserTokenResponse defines model for api.v1.CreateUserTokenResponse.
type ApiV1CreateUserTokenResponse struct {
	ExpiresIn *int32  `json:"expiresIn,omitempty"`
	Token     *string `json:"token,omitempty"`
	Type      *string `json:"type,omitempty"`
}

// UserCreateUserJSONRequestBody defines body for UserCreateUser for application/json ContentType.
type UserCreateUserJSONRequestBody = ApiV1CreateUserRequest

// UserCreateUserTokenJSONRequestBody defines body for UserCreateUserToken for application/json ContentType.
type UserCreateUserTokenJSONRequestBody = ApiV1CreateUserTokenRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// UserCreateUserWithBody request with any body
	UserCreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCreateUser(ctx context.Context, body UserCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCreateUserTokenWithBody request with any body
	UserCreateUserTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCreateUserToken(ctx context.Context, body UserCreateUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) UserCreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCreateUser(ctx context.Context, body UserCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCreateUserTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCreateUserTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCreateUserToken(ctx context.Context, body UserCreateUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCreateUserTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewUserCreateUserRequest calls the generic UserCreateUser builder with application/json body
func NewUserCreateUserRequest(server string, body UserCreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewUserCreateUserRequestWithBody generates requests for UserCreateUser with any type of body
func NewUserCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserCreateUserTokenRequest calls the generic UserCreateUserToken builder with application/json body
func NewUserCreateUserTokenRequest(server string, body UserCreateUserTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserCreateUserTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewUserCreateUserTokenRequestWithBody generates requests for UserCreateUserToken with any type of body
func NewUserCreateUserTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// UserCreateUserWithBodyWithResponse request with any body
	UserCreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCreateUserResponse, error)

	UserCreateUserWithResponse(ctx context.Context, body UserCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCreateUserResponse, error)

	// UserCreateUserTokenWithBodyWithResponse request with any body
	UserCreateUserTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCreateUserTokenResponse, error)

	UserCreateUserTokenWithResponse(ctx context.Context, body UserCreateUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCreateUserTokenResponse, error)
}

type UserCreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV1CreateUserResponse
}

// Status returns HTTPResponse.Status
func (r UserCreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCreateUserTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV1CreateUserTokenResponse
}

// Status returns HTTPResponse.Status
func (r UserCreateUserTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCreateUserTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// UserCreateUserWithBodyWithResponse request with arbitrary body returning *UserCreateUserResponse
func (c *ClientWithResponses) UserCreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCreateUserResponse, error) {
	rsp, err := c.UserCreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCreateUserResponse(rsp)
}

func (c *ClientWithResponses) UserCreateUserWithResponse(ctx context.Context, body UserCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCreateUserResponse, error) {
	rsp, err := c.UserCreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCreateUserResponse(rsp)
}

// UserCreateUserTokenWithBodyWithResponse request with arbitrary body returning *UserCreateUserTokenResponse
func (c *ClientWithResponses) UserCreateUserTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCreateUserTokenResponse, error) {
	rsp, err := c.UserCreateUserTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCreateUserTokenResponse(rsp)
}

func (c *ClientWithResponses) UserCreateUserTokenWithResponse(ctx context.Context, body UserCreateUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCreateUserTokenResponse, error) {
	rsp, err := c.UserCreateUserToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCreateUserTokenResponse(rsp)
}

// ParseUserCreateUserResponse parses an HTTP response from a UserCreateUserWithResponse call
func ParseUserCreateUserResponse(rsp *http.Response) (*UserCreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV1CreateUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserCreateUserTokenResponse parses an HTTP response from a UserCreateUserTokenWithResponse call
func ParseUserCreateUserTokenResponse(rsp *http.Response) (*UserCreateUserTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCreateUserTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV1CreateUserTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1/users)
	UserCreateUser(ctx echo.Context) error

	// (POST /api/v1/users/token)
	UserCreateUserToken(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UserCreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UserCreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserCreateUser(ctx)
	return err
}

// UserCreateUserToken converts echo context to params.
func (w *ServerInterfaceWrapper) UserCreateUserToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserCreateUserToken(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/users", wrapper.UserCreateUser)
	router.POST(baseURL+"/api/v1/users/token", wrapper.UserCreateUserToken)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RUwY7TQAz9FWQ4Vkm6veUGnCokQAhOaA+zidt62diDxy2sqv478kxoVdGgCgR7c233",
	"zXvPdvbQyRCFkS1Bu4fUbXAIOQyRqt28eq0YDD8l1A/4dYvJvBZVIqoR5s41co/qkT1GhBaSKfEaDjPg",
	"MODFQgwpfRPtLxc3wvh2O9xNoG4T6gTyYfYzI3f32Jm3X1CSonDCX6VQ/6eYH+UL8qRFv5X7t3LGp6c0",
	"4fdIimnJ/mMlOgSDFohtcQNHeGLDNarjm8NdJFoSV5D0FPFKcjPZg9ec6bOX75cwgx1qImFooamaau7Q",
	"EpFDJGhhUTXVAnxDbJP51yFSvZvXblMxU4rFLjIYCS/7Ef/kCcxAyzBeSf/o3Z2wIVtZ7fhAXf5rfZ+E",
	"T5vv0QvFFbTwvD6dRj3eRT15FFmyv0iKPbSmW8yJMpRM+6Zp/iWPcfyZSI+pU4pWTH73psworBO0n7NR",
	"cOuZM2fr49yv8Tfv3P8y+ey2ntrp82u73u5Taj9+FkvpcHv4EQAA//8vRn06hgUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
