// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"app/configs"
	"app/handler/api"
	"app/infra/database"
	"app/infra/encryption"
	"app/infra/token_provider"
	"app/internal/user/usecase"
	"app/server"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(applicationConfig *configs.ApplicationConfig, dbConfig *configs.DBConfig, logger log.Logger) (*kratos.App, func(), error) {
	grpcServer := server.NewGRPCServer(applicationConfig, logger)
	postgresDB, cleanup := database.NewPostgresDB(dbConfig, logger)
	userRepository := database.NewUserRepository(postgresDB)
	bcryptEncryption := encryption.NewBcryptEncryption()
	userJwtProvider := tokenprovider.NewUserJwtProvider(applicationConfig)
	userWriterUsecase := usecase.NewUserWriterUsecase(userRepository, bcryptEncryption, userRepository, userJwtProvider)
	userApiHandler := api.NewUserApiHandler(userWriterUsecase, logger)
	httpServer := server.NewHTTPServer(applicationConfig, userApiHandler, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
